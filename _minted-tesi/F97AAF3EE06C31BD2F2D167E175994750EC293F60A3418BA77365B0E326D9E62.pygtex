\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{def} \PYG{n+nf}{test\PYGZus{}pairing}\PYG{p}{(}\PYG{n}{ctx}\PYG{p}{:} \PYG{n}{Context}\PYG{p}{):}
    \PYG{c+c1}{\PYGZsh{} quando il dispositivo è resettato i LED devono essere rossi}
    \PYG{k}{assert} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{io}\PYG{o}{.}\PYG{n}{get\PYGZus{}led\PYGZus{}color}\PYG{p}{()} \PYG{o}{==} \PYG{n}{LedColor}\PYG{o}{.}\PYG{n}{RED}

    \PYG{c+c1}{\PYGZsh{} quando il dispositivo è resettato il carico non deve essere attivo}
    \PYG{k}{assert} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{io}\PYG{o}{.}\PYG{n}{load\PYGZus{}state}\PYG{p}{(}\PYG{n}{ctx}\PYG{p}{)} \PYG{o}{==} \PYG{k+kc}{False}

    \PYG{c+c1}{\PYGZsh{} connette il Raspberry all\PYGZsq{}AP del radiatore elettrico}
    \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{wifi}\PYG{o}{.}\PYG{n}{client\PYGZus{}connect}\PYG{p}{()}

    \PYG{c+c1}{\PYGZsh{} attendo che il radiatore si avvii}
    \PYG{n}{sleep}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{)}

    \PYG{c+c1}{\PYGZsh{} invio al radiatore una richiesta di provisioning}
    \PYG{n}{ap\PYGZus{}config} \PYG{o}{=} \PYG{n}{ApConfiguration}\PYG{p}{(}
        \PYG{n}{ssid}\PYG{o}{=}\PYG{n}{TEST\PYGZus{}SSID}\PYG{p}{,}
        \PYG{n}{passphrase}\PYG{o}{=}\PYG{n}{TEST\PYGZus{}PASSPHRASE}\PYG{p}{,}
        \PYG{n}{security\PYGZus{}type}\PYG{o}{=}\PYG{n}{WifiSecurityType}\PYG{o}{.}\PYG{n}{WPA2}\PYG{p}{,}
        \PYG{n}{channel}\PYG{o}{=}\PYG{l+m+mi}{6}\PYG{p}{,}
    \PYG{p}{)}
    \PYG{n}{env\PYGZus{}id} \PYG{o}{=} \PYG{n+nb}{str}\PYG{p}{(}\PYG{n}{uuid}\PYG{o}{.}\PYG{n}{uuid4}\PYG{p}{())}
    \PYG{n}{response} \PYG{o}{=} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{wifi}\PYG{o}{.}\PYG{n}{send\PYGZus{}provision\PYGZus{}request}\PYG{p}{(}\PYG{n}{ap\PYGZus{}config}\PYG{p}{,} \PYG{n}{env\PYGZus{}id}\PYG{p}{)}

    \PYG{c+c1}{\PYGZsh{} mi assicuro che la richiesta abbia successo}
    \PYG{k}{assert} \PYG{n}{response}\PYG{o}{.}\PYG{n}{status\PYGZus{}code} \PYG{o}{==} \PYG{l+m+mi}{200}
    \PYG{k}{assert} \PYG{n}{response}\PYG{o}{.}\PYG{n}{json}\PYG{p}{()[}\PYG{l+s+s1}{\PYGZsq{}status\PYGZsq{}}\PYG{p}{]} \PYG{o}{==} \PYG{l+s+s1}{\PYGZsq{}success\PYGZsq{}}

    \PYG{c+c1}{\PYGZsh{} a questo punto il RE si sta riavviando in modalità client}
    \PYG{c+c1}{\PYGZsh{} attivo l\PYGZsq{}AP del raspberry con la configurazione mandata al radiatore}
    \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{wifi}\PYG{o}{.}\PYG{n}{start\PYGZus{}ap}\PYG{p}{(}\PYG{n}{ap\PYGZus{}config}\PYG{p}{)}

    \PYG{c+c1}{\PYGZsh{} attendo che la comunicazione abbia successo}
    \PYG{c+c1}{\PYGZsh{} una volta che ha successo sul cloud ricevo un messaggio GET dal radiatore}
    \PYG{n}{msg} \PYG{o}{=} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{cloud}\PYG{o}{.}\PYG{n}{receive}\PYG{p}{(}\PYG{n}{timeout}\PYG{o}{=}\PYG{l+m+mi}{60}\PYG{p}{)}
    \PYG{k}{assert} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{action} \PYG{o}{==} \PYG{n}{Action}\PYG{o}{.}\PYG{n}{GET}

    \PYG{c+c1}{\PYGZsh{} rispondo al messaggio GET con un rejected, in quanto non c\PYGZsq{}è attualmente}
    \PYG{c+c1}{\PYGZsh{} su cloud lo stato del dispositivo }
    \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{cloud}\PYG{o}{.}\PYG{n}{publish}\PYG{p}{(}\PYG{n}{Message}\PYG{p}{(}
        \PYG{n}{action}\PYG{o}{=}\PYG{n}{Action}\PYG{o}{.}\PYG{n}{GET}\PYG{p}{,}
        \PYG{n}{response}\PYG{o}{=}\PYG{n}{Response}\PYG{o}{.}\PYG{n}{REJECTED}\PYG{p}{,}
        \PYG{n}{state}\PYG{o}{=}\PYG{p}{\PYGZob{}}
            \PYG{l+s+s2}{\PYGZdq{}clientToken\PYGZdq{}}\PYG{p}{:} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{state}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}clientToken\PYGZdq{}}\PYG{p}{],}
            \PYG{l+s+s2}{\PYGZdq{}timestamp\PYGZdq{}}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{time}\PYG{p}{()),}
            \PYG{l+s+s2}{\PYGZdq{}requestId\PYGZdq{}}\PYG{p}{:} \PYG{l+m+mi}{0}\PYG{p}{,}
            \PYG{l+s+s2}{\PYGZdq{}type\PYGZdq{}}\PYG{p}{:} \PYG{n}{PacketType}\PYG{o}{.}\PYG{n}{HEADER}\PYG{p}{,}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{))}

    \PYG{c+c1}{\PYGZsh{} a questo punto il radiatore dovrebbe mandarmi una richiesta REPORTED\PYGZus{}UPDATE}
    \PYG{n}{msg} \PYG{o}{=} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{cloud}\PYG{o}{.}\PYG{n}{receive}\PYG{p}{()}
    \PYG{k}{assert} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{method} \PYG{o}{==} \PYG{n}{Action}\PYG{o}{.}\PYG{n}{REPORTED\PYGZus{}UPDATE}

    \PYG{c+c1}{\PYGZsh{} la versione iniziale deve essere zero}
    \PYG{k}{assert} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{state}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}version\PYGZdq{}}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{0}

    \PYG{c+c1}{\PYGZsh{} il systemdId deve corrispondere all\PYGZsq{}envId inviato prima}
    \PYG{k}{assert} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{state}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}systemId\PYGZdq{}}\PYG{p}{]} \PYG{o}{==} \PYG{n}{env\PYGZus{}id}

    \PYG{c+c1}{\PYGZsh{} controllo che la versione firmware sia la stessa indicata}
    \PYG{k}{assert} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{state}\PYG{p}{[}\PYG{l+s+s1}{\PYGZsq{}firmwareVersion\PYGZsq{}}\PYG{p}{][}\PYG{l+m+mi}{0}\PYG{p}{]} \PYG{o}{==} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{firmware}\PYG{o}{.}\PYG{n}{version}\PYG{o}{.}\PYG{n}{major}
    \PYG{k}{assert} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{state}\PYG{p}{[}\PYG{l+s+s1}{\PYGZsq{}firmwareVersion\PYGZsq{}}\PYG{p}{][}\PYG{l+m+mi}{1}\PYG{p}{]} \PYG{o}{==} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{firmware}\PYG{o}{.}\PYG{n}{version}\PYG{o}{.}\PYG{n}{minor}
    \PYG{k}{assert} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{state}\PYG{p}{[}\PYG{l+s+s1}{\PYGZsq{}firmwareVersion\PYGZsq{}}\PYG{p}{][}\PYG{l+m+mi}{2}\PYG{p}{]} \PYG{o}{==} \PYG{n}{ctx}\PYG{o}{.}\PYG{n}{firmware}\PYG{o}{.}\PYG{n}{version}\PYG{o}{.}\PYG{n}{patch}
\end{Verbatim}
